from __future__ import print_function
from bd import obtener_conexion
import sys

def insertar_exploit(cve, name, description, user):
    try:
        conexion = obtener_conexion()
        print("INSERT INTO exploits(cve, name, description, uploadDate, user) VALUES ('{}', '{}', '{}', now(),'{}')".format(cve, name, description, user))
        with conexion.cursor() as cursor:
            cursor.execute("INSERT INTO exploits(cve, name, description, uploadDate, user) VALUES ('{}', '{}', '{}', now(),'{}')".format(cve, name, description, user))
            if cursor.rowcount == 1:
                ret={"status": "OK" }
            else:
                ret = {"status": "Failure" }
        code=200
        conexion.commit()
        conexion.close()
    except:
        print("Excepcion al insertar un exploit", file=sys.stdout)
        ret = {"status": "Failure" }
        code=500
    return ret,code

def convertir_exploit_a_json(exploit):
    d = {}
    d['cve'] = exploit[0]
    d['name'] = exploit[1]
    d['description'] = exploit[2]
    d['uploadDate'] = exploit[3].strftime('%Y-%m-%d %H:%M:%S')
    d['user'] = exploit[4]
    return d

def obtener_exploits():
    try:
        conexion = obtener_conexion()
        with conexion.cursor() as cursor:
            cursor.execute("SELECT cve, name, description, uploadDate, user FROM exploits")
            exploits = cursor.fetchall()
            exploitsjson=[]
            if exploits:
                for exploit in exploits:
                    exploitsjson.append(convertir_exploit_a_json(exploit))
        conexion.close()
        code=200
    except:
        print("Excepcion al obtener los exploits", file=sys.stdout)
        exploitsjson=[]
        code=500
    return exploitsjson,code

def obtener_exploit_por_id(cve):
    exploitjson = {}
    try:
        conexion = obtener_conexion()
        with conexion.cursor() as cursor:
            cursor.execute("SELECT cve, name, description, uploadDate, user FROM exploits WHERE cve = '{}'".format(cve))
            exploit = cursor.fetchone()
            if exploit is not None:
                exploitjson = convertir_exploit_a_json(exploit)
        conexion.close()
        code=200
    except:
        print("Excepcion al recuperar un exploit", file=sys.stdout)
        code=500
    return exploitjson,code


def eliminar_exploit(cve):
    try:
        conexion = obtener_conexion()
        with conexion.cursor() as cursor:
            cursor.execute("DELETE FROM exploits WHERE cve = '{}'".format(cve))
            if cursor.rowcount == 1:
                ret={"status": "OK" }
            else:
                ret={"status": "Failure" }
        conexion.commit()
        conexion.close()
        code=200
    except:
        print("Excepcion al eliminar un exploit", file=sys.stdout)
        ret = {"status": "Failure" }
        code=500
    return ret,code

def actualizar_exploit(cve, name, description):
    try:
        conexion = obtener_conexion()
        with conexion.cursor() as cursor:
            cursor.execute("UPDATE exploits SET name = '{}', description = '{}' WHERE cve = '{}'".format(name, description, cve))
            if cursor.rowcount == 1:
                ret={"status": "OK" }
            else:
                ret={"status": "Failure" }
        conexion.commit()
        conexion.close()
        code=200
    except:
        print("Excepcion al actualizar el exploit", file=sys.stdout)
        ret = {"status": "Failure" }
        code=500
    return ret,code
